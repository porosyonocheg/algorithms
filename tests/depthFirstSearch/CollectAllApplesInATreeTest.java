package depthFirstSearch;

import org.junit.Test;

import java.util.*;

import static org.junit.Assert.assertEquals;

public class CollectAllApplesInATreeTest {
    @Test
    public void minTime() {
        assertEquals(0, new CollectAllApplesInATree().minTime(1, new int[][]{}, Arrays.asList(true)));
        assertEquals(0, new CollectAllApplesInATree().minTime(2, new int[][]{{0,1}}, Arrays.asList(true,false)));
        assertEquals(4, new CollectAllApplesInATree().minTime(3, new int[][]{{0,1},{1,2}}, Arrays.asList(false,false,true)));
        assertEquals(2, new CollectAllApplesInATree().minTime(4, new int[][]{{0,1},{1,2},{0,3}}, Arrays.asList(false,false,false,true)));
        assertEquals(0, new CollectAllApplesInATree().minTime(5, new int[][]{{0,1},{1,3},{2,4},{1,4}}, Arrays.asList(false,false,false,false,false)));
        assertEquals(8, new CollectAllApplesInATree().minTime(7, new int[][]{{0,1},{0,2},{1,4},{1,5},{2,3},{2,6}}, Arrays.asList(false,false,true,false,true,true,false)));
        assertEquals(16, new CollectAllApplesInATree().minTime(10, new int[][]{{0,4},{1,3},{3,6},{4,5},{1,5},{8,9},{0,7},{7,8},{2,8}}, Arrays.asList(false,false,true,false,false,false,true,false,false,false)));
        assertEquals(98, new CollectAllApplesInATree().minTime(50, new int[][]{{0,1},{0,2},{1,3},{1,4},{2,5},{2,6},{3,7},{3,8},{4,9},{4,10},{5,11},{5,12},{6,13},{6,14},{7,15},{7,16},{8,17},{8,18},{9,19},{9,20},{10,21},{10,22},{11,23},{11,24},{12,25},{12,26},{13,27},{13,28},{14,29},{14,30},{15,31},{15,32},{16,33},{16,34},{17,35},{17,36},{18,37},{18,38},{19,39},{19,40},{20,41},{20,42},{21,43},{21,44},{22,45},{22,46},{23,47},{23,48},{24,49}}, Arrays.asList(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true)));
        assertEquals(132, new CollectAllApplesInATree().minTime(100, new int[][]{{0,1},{0,2},{1,3},{1,4},{2,5},{2,6},{3,7},{3,8},{4,9},{4,10},{5,11},{5,12},{6,13},{6,14},{7,15},{7,16},{8,17},{8,18},{9,19},{9,20},{10,21},{10,22},{11,23},{11,24},{12,25},{12,26},{13,27},{13,28},{14,29},{14,30},{15,31},{15,32},{16,33},{16,34},{17,35},{17,36},{18,37},{18,38},{19,39},{19,40},{20,41},{20,42},{21,43},{21,44},{22,45},{22,46},{23,47},{23,48},{24,49},{24,50},{25,51},{25,52},{26,53},{26,54},{27,55},{27,56},{28,57},{28,58},{29,59},{29,60},{30,61},{30,62},{31,63},{31,64},{32,65},{32,66},{33,67},{33,68},{34,69},{34,70},{35,71},{35,72},{36,73},{36,74},{37,75},{37,76},{38,77},{38,78},{39,79},{39,80},{40,81},{40,82},{41,83},{41,84},{42,85},{42,86},{43,87},{43,88},{44,89},{44,90},{45,91},{45,92},{46,93},{46,94},{47,95},{47,96},{48,97},{48,98},{49,99}}, Arrays.asList(false,true,false,false,false,false,false,true,true,true,true,false,false,true,false,true,true,false,true,false,true,false,false,true,false,true,true,false,false,true,true,true,false,false,true,true,false,true,false,false,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,false,false,false,false,true,true,true,true,true,true,false,false,true,false,false,true,true,true,true,false,true,false,false,false,false,false,false,false,false,false,true,false,true,true,true,true,true,false,false,true,false,false,false,false,true)));
        List<Boolean> list = Arrays.asList(false,true,false,true,false,true,false,false,false,true,false,false,false,false,false,false,false,true,false,true,false,false,true,true,false,false,true,false,false,true,false,true,false,false,true,true,true,true,false,true,false,true,true,false,true,false,false,true,false,true,false,false,true,true,true,true,true,true,false,true,false,true,true,true,false,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,false,true,true,true,false,true,false,false,false,true,true,true,false,true,false,true,true,false,false,false,false,false,true,false,true,false,true,true,true,false,false,false,true,false,true,true,false,true,false,false,false,false,false,false,false,true,true,false,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,false,false,true,true,true,true,true,false,false,true,false,false,true,false,true,true,false,true,false,false,true,true,true,false,false,true,false,false,true,true,true,false,true,false,true,true,false,true,false,true,true,true,true,true,false,true,true,false,true,false,false,false,false,false,false,true,true,true,false,true,true,true,false,false,true,true,false,false,false,false,true,true,false,true,false,false,false,false,true,true,false,true,true,true,false,false,true,false,false,false,true,false,false,true,true,true,true,false,true,true,true,false,true,true,true,false,false,false,false,true,true,false,false,true,true,false,false,true,false,true,false,true,true,true,true,false,false,false,false,false,true,false,false,false,false,false,true,false,false,false,true,false,true,true,true,false,true,true,true,true,true,false,false,false,false,false,true,true,false,false,false,true,true,true,true,false,false,false,false,true,false,false,true,true,true,true,false,false,false,true,true,true,false,false,true,false,false,true,false,true,false,true,true,true,false,true,false,true,true,false,true,true,true,true,true,true,true,false,false,false,true,true,false,true,false,false,false,true,false,true,false,false,false,false,false,false,false,false,true,false,false,true,true,true,false,false,true,false,true,true,false,true,false,true,true,true,false,true,false,true,true,true,false,true,false,true,false,true,false,false,true,false,false,false,true,false,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,false,false,false,false,true,true,false,true,true,true,true,false,true,true,false,true,true,false,true,false,true,false,true,false,true,true,true,true,false,false,true,false,true,false,true,false,true,false,true,false,true,true,true,false,true,false,true,true,false,false,false,false,false,false,true,true,true,false,false,true,false,false,true,false,false,false,false,true,false,false,true,false,false,true,false,true,false,true,false,false,true,true,true,false,false,true,true,false,true,true,true,true,true,true,true,false,true,false,false,true,true,false,false,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,false,true,false,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,false,false,false,true,false,false,false,true,true,true,true,true,true,false,true,false,false,false,false,true,true,true,true,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,true,true,true,true,true,true,false,false,false,false,false,true,false,true,false,true,true,true,false,true,false,false,false,false,false,false,false,false,true,true,false,true,false,true,false,false,true,false,false,false,true,false,true,false,false,false,false,true,false,false,true,true,true,true,false,true,true,true,true,true,false,false,false,false,false,true,true,false,true,false,false,false,true,true,false,true,false,false,true,false,false,true,false,false,false,false,true,false,true,false,false,false,true,false,true,true,false,false,false,false,false,true,false,false,false,true,false,false,false,false,false,false,true,false,true,false,true,false,true,false,false,true,false,true,true,false,false,true,false,false,false,false,true,true,false,true,true,false,false,true,true,true,false,true,false,true,false,false,true,false,true,false,false,true,false,true,false,true,false,true,true,false,false,false,false,true,false,false,false,false,true,true,true,false,false,false,false,true,true,false,true,false,false,true,true,true,false,true,false,false,false,false,true,true,false,true,false,true,true,false,false,false,false,false,true,false,false,true,true,true,true,true,false,true,false,false,false,false,true,false,false,true,false,false,true,false,true,true,true,false,true,false,true,false,true,false,true,false,false,true,true,false,true,false,false,false,false,true,true,false,false,false,false,false,false,true,true,false,true,false,true,false,true,true,false,true,true,true,false,true,false,false,true,false,true,false,false,false,false,false,false,false,true,true,true,true,true,true,true,false,false,false,true,true,false,false,true,true,false,false,false,true,true,true,false,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,false,true,false,false,false,false,false,true,false,true,false,true,true,true,true,true,false,false,true,false,true,true,true,true,false,true,false,true,true,true,false,false,false,false,true,true,true,false,false,true,true,false,true,true,true,true,true,false,false,false,false,false,false,true,true,false,false,true,false,true,false,false,true,false,false,false,true,true,true);
       // assertEquals(0, new CollectAllApplesInATree().minTime(1000, new int[][]{{}}, list));
    }

    @Test
    public void g() {
        int n = 1000;
        List<Integer> first = new ArrayList<>();
        for (int i = 0, j = 1; i < n/2; i++) {
            for (int k = 0; k < 2; k++,j++) {
                System.out.print("{" + i + "," + j + "},");
            }
        }
    }

    @Test
    public void replace() {
        String s = "{0,1},{0,2},{1,3},{1,4},{2,5},{2,6},{3,7},{3,8},{4,9},{4,10},{5,11},{5,12},{6,13},{6,14},{7,15},{7,16},{8,17},{8,18},{9,19},{9,20},{10,21},{10,22},{11,23},{11,24},{12,25},{12,26},{13,27},{13,28},{14,29},{14,30},{15,31},{15,32},{16,33},{16,34},{17,35},{17,36},{18,37},{18,38},{19,39},{19,40},{20,41},{20,42},{21,43},{21,44},{22,45},{22,46},{23,47},{23,48},{24,49},{24,50},{25,51},{25,52},{26,53},{26,54},{27,55},{27,56},{28,57},{28,58},{29,59},{29,60},{30,61},{30,62},{31,63},{31,64},{32,65},{32,66},{33,67},{33,68},{34,69},{34,70},{35,71},{35,72},{36,73},{36,74},{37,75},{37,76},{38,77},{38,78},{39,79},{39,80},{40,81},{40,82},{41,83},{41,84},{42,85},{42,86},{43,87},{43,88},{44,89},{44,90},{45,91},{45,92},{46,93},{46,94},{47,95},{47,96},{48,97},{48,98},{49,99}";
        System.out.println(s.replace("{","[" ).replace("}", "]"));
    }
}
