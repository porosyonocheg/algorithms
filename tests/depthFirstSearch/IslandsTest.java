package depthFirstSearch;

import org.junit.Test;
import static org.junit.Assert.*;

public class IslandsTest {
    @Test
    public void getNumberOfIslands() {
        assertEquals(0, new Islands().getNumberOfIslands(new char[][]{{'0'}}));
        assertEquals(0, new Islands().getNumberOfIslands(new char[][]{{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][]{{'1'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][]{{'1','1','1','1','1'},{'1','1','1','1','1'},{'1','1','1','1','1'},{'1','1','1','1','1'},{'1','1','1','1','1'},{'1','1','1','1','1'},{'1','1','1','1','1'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][]{{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','1'},{'0','0','0','0','0','0','0','0','0','0'},{'0','0','0','0','0','0','0','0','0','0'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][]{{'1','1','1','1','0'}, {'1','1','0','1','0'}, {'1','1','0','0','0'}, {'0','0','0','0','0'}}));
        assertEquals(3, new Islands().getNumberOfIslands(new char[][]{{'1','1','0','1','1','0'},{'1','1','1','0','1','0'},{'0','1','0','0','1','1'},{'1','1','0','1','1','0'},{'0','0','1','1','0','1'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][]{{'1','1','1','1','1','1','1','1','1','1'},{'1','0','0','0','0','0','0','0','0','1'},{'1','0','0','0','0','0','0','0','0','1'},{'1','0','0','0','0','0','0','0','0','1'},{'1','0','0','0','0','0','0','0','0','1'},{'1','1','1','1','1','1','1','1','1','1'}}));
        assertEquals(10, new Islands().getNumberOfIslands(new char[][]{{'1','0','0','0','0','0','0','0','0','0'},
                                                                               {'0','1','0','0','0','0','0','0','0','1'},
                                                                               {'0','0','1','0','0','0','0','0','1','0'},
                                                                               {'0','0','0','1','0','0','0','1','0','0'},
                                                                               {'0','0','0','0','1','0','1','0','0','0'},
                                                                               {'0','0','0','0','0','1','0','0','0','0'}}));
        assertEquals(6, new Islands().getNumberOfIslands(new char[][] { {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','0','1'}}));
        assertEquals(1, new Islands().getNumberOfIslands(new char[][] { {'1','0','1','0','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','1','1','0','1','0','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','1','1','0','1'},
                                                                                {'1','0','1','0','1','0','1','0','1','1','1'},
                                                                                {'1','0','1','0','1','1','1','0','1','0','1'},
                                                                                {'1','1','1','0','1','0','1','0','1','0','1'}}));
    }
}
