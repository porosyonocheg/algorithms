package dynamicProgramming;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class UncrossedLinesTest {
    @Test
    public void getMaxNumberOfLines() {
        assertEquals(0, new UncrossedLines().getMaxNumberOfLines(new int[]{1}, new int[]{0}));
        assertEquals(1, new UncrossedLines().getMaxNumberOfLines(new int[]{2}, new int[]{2}));
        assertEquals(1, new UncrossedLines().getMaxNumberOfLines(new int[]{1,3}, new int[]{3,1}));
        assertEquals(3, new UncrossedLines().getMaxNumberOfLines(new int[]{2,5,7}, new int[]{2,5,7}));
        assertEquals(2, new UncrossedLines().getMaxNumberOfLines(new int[]{1,3,6}, new int[]{6,1,3}));
        assertEquals(4, new UncrossedLines().getMaxNumberOfLines(new int[]{7,7,7,7}, new int[]{7,7,7,7}));
        assertEquals(1, new UncrossedLines().getMaxNumberOfLines(new int[]{7,2,3,1}, new int[]{1,3,2,7}));
        assertEquals(3, new UncrossedLines().getMaxNumberOfLines(new int[]{2,5,1,2,5}, new int[]{10,5,2,1,5,2}));
        assertEquals(2, new UncrossedLines().getMaxNumberOfLines(new int[]{1,3,7,1,7,5}, new int[]{1,9,2,5,1}));
        assertEquals(20, new UncrossedLines().getMaxNumberOfLines(new int[]{8,9,4,5,6,6,4,5,9,7,8,7,9,9,8,3,4,5,8,9,8,8,10,2,6,4,6,9,7,5,7,7}, new int[]{8,2,9,3,2,8,1,5,2,4,6,9,2,7,2,2,4,9,3,9,10,3,8,4,7,3,10,3,4,1,8,5,9,1,7,1,1,9,6,2,6,4,6,9,5,5,9,10,3,3,9,7,9,9,2}));
        assertEquals(38, new UncrossedLines().getMaxNumberOfLines(new int[]{15,14,9,10,7,9,9,3,3,3,4,8,12,15,10,9,4,6,3,12,7,9,8,9,5,13,13,10,13,13,11,14,4,4,5,1,4,14,7,10,5,13,6,8,2,3,14,13,8,9,13,6,11,3,5,15,2,12,10,3,10,5,13,11,13,7,3,3,10,3,5,9,15,3,2,2,5,5,4,13,15,9,13,5,1,11,14,13,7,4,8,11,14,10,6,8,9,10,15,11,13,7,14,12,15}, new int[]{1,14,13,6,5,9,10,9,14,1,3,8,6,15,1,4,14,1,10,7,12,11,9,12,8,4,4,1,1,11,3,2,8,15,6,8,3,14,8,6,8,13,7,13,2,1,1,2,10,12,5,1,12,9,4,9,12,11,2,11,1,2,15,11,6,11,3,10,7,7,3,7,2,8,7,10,10,13,15,2,13,8,9,8,6,1,14,10,15,5,5,5,12,13,4,11,11,14}));
        assertEquals(69, new UncrossedLines().getMaxNumberOfLines(new int[]{3,3,21,23,22,6,8,9,19,6,7,10,18,6,17,13,17,23,18,18,22,20,21,12,6,3,16,14,6,4,24,11,18,11,14,17,24,2,19,6,6,24,1,5,22,6,9,5,24,24,21,21,16,12,24,18,12,10,8,10,12,2,5,14,13,2,22,5,17,8,2,11,14,11,20,7,10,20,4,2,2,16,14,11,7,5,21,16,2,4,22,15,4,15,24,5,18,20,23,17,1,17,19,7,5,12,7,15,20,24,13,12,21,6,14,16,15,6,2,4,18,11,19,14,15,24,12,2,5,1,14,6,17,5,2,3,14,21,16,3,10,18,19,1,20,6,8,12,4,8,1,1,17,1,3,21,11,11,21,13,4,6,5,5,9,7,5,14,11,3,20,14,3,19,20,15,1,6,21,7,10,6,12,13,8,18,15}, new int[]{18,8,19,22,15,3,22,3,17,20,9,18,6,11,10,3,20,15,18,12,17,12,13,14,22,17,18,21,9,11,3,4,19,11,6,15,4,2,19,4,8,11,17,10,4,2,6,16,19,8,10,16,19,16,1,6,15,3,6,8,1,24,4,12,20,8,7,20,8,22,7,22,24,17,18,14,1,4,20,11,22,16,1,1,7,6,6,13,17,4,13,14,4,16,18,24,13,21,17,7,18,23,19,18,18,18,18,3,10,15,2,20,8,16,12,2,21,14,10,8,7,19,21,16,7,22,1,4,17,9,10,23,4,14,15,16,1,15,17,2,19,24,23,19,21,23,1,5,19,1,6,9,20,22,21,16,24,14,1,19,1,13,10,17,12,18,11,7,18,16,14,19,10,9,21,16,21,21,14,2,9,10,20,16,12,23,12,19,18,16,4,20,19,20,22,19,9,6,4,15,15,15,8,4,1,6,15,7,22,1,2,15,2,13,6,1,15,19,15,17,18,16,2,18,24,19,22,2,12,16,14,16,24,6,13,5,6,2,10,11,9,16,24,4,14,4,20,7,9,19,14,11,16}));
        assertEquals(136, new UncrossedLines().getMaxNumberOfLines(new int[]{12,10,20,11,7,32,28,27,26,17,23,10,31,20,33,26,8,14,27,8,3,27,8,28,6,26,3,25,16,23,9,15,25,33,11,10,10,21,24,24,3,22,16,9,31,19,23,13,33,18,14,3,27,8,4,16,23,25,29,32,13,6,6,32,2,29,21,8,23,14,31,5,12,5,27,1,31,9,2,8,13,28,15,10,21,2,3,3,1,23,28,11,2,9,31,25,5,33,19,27,5,13,8,29,10,12,28,15,29,6,29,33,4,29,21,27,6,5,26,20,32,16,31,21,5,24,1,12,7,9,7,25,11,14,13,26,17,4,7,24,30,19,10,7,26,5,15,15,12,24,28,14,24,21,29,17,29,26,23,9,33,11,4,31,17,23,31,2,19,30,22,28,28,17,20,4,32,2,30,1,32,31,16,25,1,31,2,5,16,16,24,33,26,13,16,24,9,19,4,32,9,15,5,21,5,9,2,25,19,3,20,25,21,28,21,18,22,5,17,6,11,2,15,8,3,24,4,14,18,21,31,18,8,22,33,23,29,33,8,16,20,4,29,31,32,21,9,7,2,28,11,3,33,22,9,20,9,1,25,3,31,31,21,23,24,23,7,29,2,17,15,16,28,5,13,1,29,33,30,33,9,26,7,15,31,20,6,4,21,11,30,23,5,26,14,19,23,8,11,27,12,16,17,23,2,6,28,17,12,27,11,10,5,10,8,31,30,10,17,15,17,30,19,10,28,7,9,3,32,7,10,29,26,27,24,2,13,14,2,20,8,7,26,18,27,1,2,5,7,32,9,2,31,24,12,19,22,10,5,26,1,16,23,5,29,8,1,24,32,21,5,26,15,20,4,31,7,29,1,26,25,12,10,26,11,26,1,26,13,16,16,30,21,2,5,31,1,6,20,28,21,27,2,25,12,6,12,28,6,9,31,11,17,22,32,18,13,33,31,22,21,32,23,25,32,13,2,9,33,32,15,13,11,3,12,20,16,21,20,4,19,21,25,21,9,27,32,13,16,10,4,25,17,21,7,8,30,33,16,27,29,2,15,11,7,30,8,8,10,4,31,29,23,1,26,31,21,3,15,27,1,25,6,31,23,4,19,21,19,9,15,32,1,28,22,1,14,14,24,1}, new int[]{23,30,19,12,25,30,24,1,15,28,13,5,9,29,32,24,24,11,5,19,3,4,7,18,7,20,20,3,22,28,12,15,22,3,19,7,18,33,1,20,6,24,1,32,2,30,22,30,31,9,32,9,23,4,6,26,15,28,3,20,28,30,8,20,25,1,1,29,22,23,1,6,9,30,26,5,10,19,17,12,9,16,7,2,21,9,20,18,18,28,15,2,8,16,11,24,23,12,29,9,15,19,33,12,24,18,23,5,24,32,26,28,3,15,12,8,5,9,25,7,28,28,19,6,16,20,12,14,18,6,8,6,25,21,29,27,27,24,4,2,10,21,19,29,30,20,14,12,28,9,10,16,21,10,1,28,31,23,24,9,21,19,9,9,24,29,32,8,9,15,24,8,11,28,14,27,19,23,31,1,30,24,30,7,7,32,12,27,32,26,2,11,24,2,10,10,11,13,13,3,20,4,21,33,29,5,33,17,24,28,11,15,12,12,6,13,12,9,8,15,15,9,32,25,21,26,6,16,26,16,4,32,19,21,2,18,8,2,32,3,11,14,13,29,33,21,18,18,2,31,6,32,14,29,12,20,1,15,2,10,10,6,5,2,3,15,24,14,33,5,16,30,22,15,2,13,3,11,21,12,14,29,10,24,3,20,21,5,9,31,7,9,8,28,30,25,11,15,5,26,28,10,13,31,10,33,14,2,19,7,29,18,32,6,13,31,5,11,13,4,28,28,4,10,10,8,32,26,30,4,20,10,7,7,9,7,23,5,3,7,19,9,7,28,29,22,14,15,3,7,10,19,24,15,33,33,5,22,30,9,20,5,24,3,24,4,6,20,21,33,17,32,32,33,6,14,31,9,29,33,3,29,7,18,8,31,14,16,3,15,22,11,4,1,6,1,33,30,1,33,8,29,33,3,11,31,11,16,9,4,25,14,28,9,16,14,3,24,4,7,8,19,22,23,3,5,19,5,31,11,2,12,32,33,18,2,3,20,20,2,21,14,22,14,32,9,20,9,16,8,7,7,26,26,28,25,16,2,25,16,30,15,17,14,8,5,9,11,33,14,9,6,29,3,2,13,8,6,5,14,24,23,20,17,13,19,12,25,7,28,8,3,14,18,25,16,25,28,27,31}));
    }
}
