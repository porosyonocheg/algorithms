package dynamicProgramming;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class PartitionArrayOfMaxValuesTest {
    @Test
    public void maxSumAfterPartitioning() {
        assertEquals(5, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{5}, 1));
        assertEquals(6, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{4,2}, 1));
        assertEquals(14, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{3,7}, 2));
        assertEquals(11, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{1,3,5}, 2));
        assertEquals(34, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{4,10,3,2}, 3));
        assertEquals(43, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{5,1,7,12,3}, 2));
        assertEquals(75, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{10,9,8,7,6,1,2,3,4,5}, 5));
        assertEquals(351, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{7,4,17,12,5,16,15,6,19,10,2,8,11,20,14,8,17,12,3,18}, 3));
        assertEquals(100, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{2,7,5,1,8,10,9,6,0,4}, 10));
        assertEquals(4353, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{27,3,35,16,20,37,33,38,26,37,27,15,6,10,33,5,38,41,39,38,19,49,7,33,14,22,9,25,29,39,46,5,5,33,40,47,44,32,45,44,49,43,6,48,27,45,46,48,18,39,46,16,32,37,24,38,3,33,47,13,30,27,50,2,16,21,43,49,13,19,17,10,19,37,46,32,33,42,3,33,31,5,41,39,8,24,21,33,43,17,26,19,42,47,12,24,15,46,22,7}, 4));
        assertEquals(127901, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{370,271,122,480,165,191,3,350,425,465,285,359,491,211,108,441,58,492,209,285,396,279,83,273,459,152,30,385,25,268,62,3,320,235,336,359,275,181,100,414,173,410,139,353,422,241,309,419,58,287,12,247,368,97,356,443,150,344,300,88,203,412,252,496,71,14,398,13,364,199,39,313,258,396,262,135,321,414,64,130,361,134,401,481,350,424,166,220,293,167,262,205,44,113,254,496,165,157,7,434,378,495,329,80,462,38,339,192,253,340,173,371,456,251,131,25,52,435,25,275,458,346,269,28,400,240,208,369,157,282,205,131,412,310,280,420,390,348,381,110,367,482,417,293,343,277,277,421,341,467,355,387,299,247,493,70,488,80,353,406,145,65,359,379,259,4,252,359,29,6,237,107,481,74,330,324,134,332,275,25,353,221,297,142,186,216,498,166,31,321,372,311,430,361,266,99,86,320,28,1,446,263,236,188,290,154,109,216,271,189,92,446,239,77,150,261,460,41,439,190,28,147,354,303,309,442,386,355,239,263,308,425,102,465,443,429,197,237,133,218,378,87,17,108,19,41,420,59,314,36,389,395,150,470,385,359,478,368,195,480,163,109,330,198,296,199,50,382,271,96,123,374,233,157,85,442,79,319,16,17,292,254,288,390,261,282,265,69,70,481,169,328,460,41,122,19,226,67,387,108,331,184,418,443,365,477,114,194,278,8,50,492,424,324,16,227,59,129,346,124,317,17,387,147,59,403,367,482,191,89,61,332,150,166,376,448,281,256,377,365,193,422,276,39,477,410,94,126,352,216,498,424,335,356,264,82,23,87,402,470,397,223,213,228,291,93,402,349,309,134,395,274,478,33,146,370,336,302,10,313,449,132,202,312,34,383,407,300,472,40,342,168,409,15,414,321,63,181,105,339,73,115,356,248,356,45,496,432,8,121,166,497,178,202,262,436,155,484,95,238,134,397,322,206,208,372,168,22,105,235,69,267,95,124,156,430,230,89,356,105,251,161,455,458,38,468,145,232,427,166,384,482,23,238,374,427,391,466,54,285,89,181,261,184,11,182,70,222,425,41,381,39,328,348,459,266,463,285,450,37,358,294,341,266,238,475,417,274,485,248,490,388,59,237,60,19,426,216,46,346}, 1));
        assertEquals(223476, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{370,271,122,480,165,191,3,350,425,465,285,359,491,211,108,441,58,492,209,285,396,279,83,273,459,152,30,385,25,268,62,3,320,235,336,359,275,181,100,414,173,410,139,353,422,241,309,419,58,287,12,247,368,97,356,443,150,344,300,88,203,412,252,496,71,14,398,13,364,199,39,313,258,396,262,135,321,414,64,130,361,134,401,481,350,424,166,220,293,167,262,205,44,113,254,496,165,157,7,434,378,495,329,80,462,38,339,192,253,340,173,371,456,251,131,25,52,435,25,275,458,346,269,28,400,240,208,369,157,282,205,131,412,310,280,420,390,348,381,110,367,482,417,293,343,277,277,421,341,467,355,387,299,247,493,70,488,80,353,406,145,65,359,379,259,4,252,359,29,6,237,107,481,74,330,324,134,332,275,25,353,221,297,142,186,216,498,166,31,321,372,311,430,361,266,99,86,320,28,1,446,263,236,188,290,154,109,216,271,189,92,446,239,77,150,261,460,41,439,190,28,147,354,303,309,442,386,355,239,263,308,425,102,465,443,429,197,237,133,218,378,87,17,108,19,41,420,59,314,36,389,395,150,470,385,359,478,368,195,480,163,109,330,198,296,199,50,382,271,96,123,374,233,157,85,442,79,319,16,17,292,254,288,390,261,282,265,69,70,481,169,328,460,41,122,19,226,67,387,108,331,184,418,443,365,477,114,194,278,8,50,492,424,324,16,227,59,129,346,124,317,17,387,147,59,403,367,482,191,89,61,332,150,166,376,448,281,256,377,365,193,422,276,39,477,410,94,126,352,216,498,424,335,356,264,82,23,87,402,470,397,223,213,228,291,93,402,349,309,134,395,274,478,33,146,370,336,302,10,313,449,132,202,312,34,383,407,300,472,40,342,168,409,15,414,321,63,181,105,339,73,115,356,248,356,45,496,432,8,121,166,497,178,202,262,436,155,484,95,238,134,397,322,206,208,372,168,22,105,235,69,267,95,124,156,430,230,89,356,105,251,161,455,458,38,468,145,232,427,166,384,482,23,238,374,427,391,466,54,285,89,181,261,184,11,182,70,222,425,41,381,39,328,348,459,266,463,285,450,37,358,294,341,266,238,475,417,274,485,248,490,388,59,237,60,19,426,216,46,346}, 6));
        assertEquals(10861, new PartitionArrayOfMaxValues().maxSumAfterPartitioning(new int[]{18,16,6,20,10,8,19,22,11,25,6,9,11,7,7,15,1,2,22,13,25,25,18,4,17,1,2,10,24,16,1,2,24,5,15,11,16,4,2,1,16,2,10,25,19,23,19,5,16,11,6,22,6,4,10,24,6,24,23,15,14,14,22,16,23,16,15,16,3,4,1,19,21,25,10,14,24,11,8,15,4,19,25,24,11,15,2,18,20,5,20,10,17,6,23,13,4,2,5,9,5,20,20,21,14,16,21,13,24,24,17,1,10,13,22,1,13,5,10,21,11,12,14,9,4,8,18,19,12,24,25,10,7,15,16,19,17,2,17,3,10,15,21,12,23,19,23,18,7,23,7,23,5,23,14,24,10,20,21,6,25,17,14,3,13,22,12,6,19,13,14,10,8,17,13,19,6,15,23,17,3,12,7,15,14,8,3,18,1,1,9,11,14,16,24,22,13,5,2,6,11,2,9,6,2,19,20,4,9,9,21,7,25,24,12,13,18,20,3,15,3,4,12,16,6,5,9,2,15,6,1,2,2,2,24,1,10,5,20,4,11,22,21,15,16,2,25,13,14,15,25,15,8,18,13,4,5,4,4,3,4,4,17,23,13,10,8,8,2,22,20,8,16,19,8,19,5,6,9,10,14,3,21,11,15,10,2,6,19,8,3,24,3,20,10,10,13,6,19,14,10,2,15,16,15,13,6,13,18,3,23,17,6,4,19,19,22,5,15,10,21,11,19,17,1,11,1,14,20,24,11,16,6,22,3,22,16,3,19,19,11,16,8,13,9,15,18,11,4,19,21,5,11,6,8,10,2,19,20,25,1,12,7,2,3,10,2,14,14,17,1,19,20,17,12,25,25,6,7,3,24,24,1,23,11,22,13,9,10,21,3,9,12,9,21,21,18,18,5,15,17,15,12,12,2,16,18,24,13,17,21,2,14,20,25,22,22,13,23,11,19,17,1,23,7,23,18,8,15,19,13,23,25,13,21,19,2,20,2,10,19,22,4,9,3,9,15,14,1,8,6,17,11,22,15,13,21,19,2,12,23,10,23,14,15,7,3,14,1,6,4,21,12,10,18,24,13,9,10,10,5,9,8,4,9,9,18,22,11,8,11,7,23,6,21,18,11,4,5,12}, 5));
    }
}
