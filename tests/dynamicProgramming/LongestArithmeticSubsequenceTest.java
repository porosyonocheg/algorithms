package dynamicProgramming;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class LongestArithmeticSubsequenceTest {
    @Test
    public void getMaxLength() {
        assertEquals(2, new LongestArithmeticSubsequence().getMaxLength(new int[]{0, 3}));
        assertEquals(2, new LongestArithmeticSubsequence().getMaxLength(new int[]{0, 3, 5}));
        assertEquals(4, new LongestArithmeticSubsequence().getMaxLength(new int[]{3,6,9,12}));
        assertEquals(3, new LongestArithmeticSubsequence().getMaxLength(new int[]{9,4,7,2,10}));
        assertEquals(4, new LongestArithmeticSubsequence().getMaxLength(new int[]{20,1,15,3,10,5,8}));
        assertEquals(2, new LongestArithmeticSubsequence().getMaxLength(new int[]{83,20,17,43,52,78,68,45}));
        assertEquals(3, new LongestArithmeticSubsequence().getMaxLength(new int[]{24,66,99,18,16,31,86,45,52,42,44,46,24,38,64}));
        assertEquals(5, new LongestArithmeticSubsequence().getMaxLength(new int[]{59,61,27,100,84,97,47,28,25,54,30,77,92,53,42,10,100,47,40,24,10,90,89,72,31,36,39,38,29,20,42,72,1,51,10,87,87,50,97,95,45,15,86,80,82,15,11,5,66,5}));
        assertEquals(13, new LongestArithmeticSubsequence().getMaxLength(new int[]{83,5,98,35,53,8,28,4,3,93,57,68,30,92,16,65,30,27,27,1,63,11,17,18,8,6,71,19,6,10,8,29,10,8,59,55,42,46,23,49,57,67,62,100,31,2,36,78,40,69,17,21,95,7,19,42,89,26,75,22,61,50,67,20,43,87,19,50,53,46,34,47,11,1,15,45,24,94,12,97,32,47,61,61,52,51,62,83,62,92,4,21,39,82,65,61,62,39,71,90,100,90,50,21,57,76,30,62,24,15,43,80,84,49,65,99,45,63,4,36,63,10,38,88,51,15,80,38,51,6,76,74,25,7,76,70,57,23,100,5,94,90,17,78,40,10,87,92,29,21,74,65,15,14,30,63,22,26,46,38,27,28,35,81,33,46,50,6,85,33,82,35,86,62,49,21,61,69,20,38,52,50,11,41,86,82,91,83,50,10,97,60,8,19,87,49,59,84,6,5,95,85,99,50,15,48,37,27,91,65,8,67,32,38,35,18,63,85,17,25,89,55,39,30,93,70,37,82,55,58,43,94,11,9,76,48,50,29,43,46,62,47,77,61,57,80,29,20,60,57,23,80,53,38,47,58,75,73,2,74,3,14,34,51,43,66,90,11,35,58,7,18,11,12,3,89,13,46,59,65,46,89,18,47,54,48,83,11,74,74,86,61,53,92,49,43,31,57,55,15,34,1,79,59,31,76,94,78,32,71,12,7,96,50,97,59,50,39,46,12,99,52,80,6,87,28,7,78,9,54,22,60,2,90,75,80,44,55,4,99,68,75,62,1,76,32,53,29,38,99,42,66,32,14,86,96,9,86,59,85,95,63,16,37,75,19,62,21,95,83,72,87,1,4,59,6,39,21,29,18,52,49,79,11,40,32,67,71,55,10,85,28,15,1,88,5,94,44,70,10,80,51,78,78,60,95,45,94,63,93,80,37,100,69,90,91,8,84,20,81,34,4,22,27,35,6,96,6,48,30,22,57,89,72,35,77,75,73,93,100,98,33,68}));
        assertEquals(19, new LongestArithmeticSubsequence().getMaxLength(new int[]{31,61,7,13,52,80,88,33,69,90,19,42,77,2,8,24,44,18,80,44,21,22,79,62,78,50,4,2,78,91,13,4,62,22,3,92,8,55,12,53,93,35,67,93,59,66,13,30,14,71,82,63,9,87,70,23,15,55,81,55,17,67,89,96,68,72,75,88,63,3,78,99,33,61,43,91,6,31,91,100,40,36,49,97,17,98,54,18,25,14,22,43,40,16,29,58,100,42,34,13,94,97,45,58,63,58,28,23,31,26,84,84,93,28,15,33,99,7,29,73,76,40,31,48,83,1,97,78,57,53,6,28,19,49,8,64,24,26,11,28,8,18,81,90,60,79,69,31,70,41,49,35,22,63,56,57,16,42,16,91,29,30,16,47,36,42,35,99,76,42,78,61,18,2,56,20,2,64,48,44,55,53,61,69,71,6,97,43,2,14,24,36,65,31,90,74,94,90,26,94,71,51,24,88,28,19,28,46,26,42,53,68,76,95,85,83,67,86,27,67,89,83,48,40,61,11,90,65,91,30,93,72,45,76,88,99,93,1,58,100,97,29,92,13,60,13,4,82,98,43,42,8,18,62,11,20,79,97,65,6,89,28,71,13,50,59,16,48,79,31,61,95,61,94,51,96,67,76,90,40,37,90,36,14,68,82,53,20,88,3,35,31,61,14,52,36,93,29,48,22,15,44,44,66,100,76,86,72,50,19,44,100,95,90,98,81,14,7,91,60,29,56,94,47,61,48,43,14,13,84,29,28,70,38,74,41,15,33,38,70,38,21,74,1,15,57,38,57,18,57,89,24,11,62,43,1,17,2,51,14,80,10,47,11,53,20,67,35,23,12,79,75,38,1,87,27,72,83,37,68,42,66,67,62,22,81,43,63,52,73,88,56,13,20,94,93,39,70,1,69,94,40,82,17,75,43,11,81,18,92,20,76,86,60,24,26,72,41,99,32,30,19,10,2,33,15,53,41,19,37,60,10,98,52,8,98,42,43,43,87,36,13,55,49,52,64,93,19,63,67,62,73,20,19,71,68,33,78,9,57,76,54,94,47,88,30,31,37,86,83,16,15,27,82,80,75,31,28,15,84,76,40,61,77,97,57,10,64,75,82,88,91,89,78,13,77,4,75,75,43,14,32,1,28,21,72,48,81,18,87,47,6,91,82,58,44,60,40,57,53,16,36,17,87,55,64,100,30,100,4,86,11,27,65,22,62,11,42,6,90,51,36,83,45,24,61,32,94,73,27,69,43,50,43,10,42,40,51,52,11,99,70,23,42,71,15,7,23,16,15,91,99,70,38,13,91,100,24,78,1,40,92,88,93,89,95,83,5,57,82,43,65,72,6,80,97,29,45,58,12,62,76,54,84,11,52,95,46,38,59,45,49,94,12,22,59,54,82,86,84,69,45,17,77,43,96,22,59,18,49,45,76,94,5,13,23,15,87,59,32,73,71,84,24,22,77,60,49,98,32,72,92,7,42,98,88,15,72,58,39,28,71,29,83,13,23,23,56,71,85,38,18,92,96,37,17,8,24,99,15,60,79,75,14,28,80,37,38,28,33,36,93,78,57,9,21,36,71,79,58,74,24,14,82,5,32,34,59,98,1,5,64,29,49,30,91,90,90,71,36,36,88,54,69,95,28,93,27,78,14,38,44,17,46,1,89,36,96,29,84,2,52,100,97,50,74,4,44,50,66,15,53,10,32,10,82,24,78,90,32,65,61,67,97,3,14,46,96,36,7,55,11,9,26,66,70,39,32,60,9,92,34,77,42,68,38,66,8,58,97,38,37,70,25,23,23,85,93,52,86,29,96,4,54,32,18,80,82,40,12,44,4,76,47,99,80,30,75,44,6,100,23,45,17,70,93,46,27,25,51,39,26,75,34,29,56,81,23,74,88,86,100,98,21,17,97,19,42,95,59,41,69,37,8,62,42,35,31,85,15,90,92,14,42,63,98,81,50,51,30,18,35,10,97,93,40,84,62,63,85,46,20,74,90,54,26,81,29,35,8,51,28,57,8,76,33,30,45,62,40,48,26,30,29,55,58,95,72,23,71,62,78,82,97,46,63,66,89,52,17,78,54,87,88,57,62,44,94,96,26,2,16,32,35,4,18,31,51,50,23,16,97,87,39,64,59,44,6,68,99,32,65,67,26,68,81,36,91,10,83,37,17,70,82,85,81,79,4,84,53,95,85,46,71,18,3,4,54,51,2,26,22,57,82,91,22,28,58,46,36,14,90,73,76,1,22,5,71,12,87}));
    }
}
