package dynamicProgramming;

import org.junit.Test;

import java.util.*;

import static org.junit.Assert.assertEquals;

public class CheapestFlightsWithinKStopsTest {
    @Test
    public void getPrice() {
        assertEquals(50, new CheapestFlightsWithinKStops().getPrice(2, new int[][]{{0,1,50}},0,1,0));
        assertEquals(200, new CheapestFlightsWithinKStops().getPrice(3, new int[][]{{0,1,100},{1,2,100},{0,2,500}},0,2,1));
        assertEquals(500, new CheapestFlightsWithinKStops().getPrice(3, new int[][]{{0,1,100},{1,2,100},{0,2,500}},0,2,0));
        assertEquals(500, new CheapestFlightsWithinKStops().getPrice(4, new int[][]{{1,2,301},{1,3,200},{3,2,100},{0,3,500},{0,1,200}},0,2,2));
        assertEquals(501, new CheapestFlightsWithinKStops().getPrice(4, new int[][]{{1,2,301},{1,3,200},{3,2,100},{0,3,500},{0,1,200}},0,2,1));
        assertEquals(897, new CheapestFlightsWithinKStops().getPrice(5, new int[][]{{1,3,110},{2,1,158},{4,0,470},{0,2,348},{3,4,159},{1,0,800},{3,0,630}},2,0,3));
        assertEquals(898, new CheapestFlightsWithinKStops().getPrice(5, new int[][]{{1,3,110},{2,1,158},{4,0,470},{0,2,348},{3,4,159},{1,0,800},{3,0,630}},2,0,2));
        assertEquals(429, new CheapestFlightsWithinKStops().getPrice(10, new int[][]{{1,8,525},{5,4,293},{9,1,381},{6,2,153},{8,0,503},{7,3,179},{2,6,129},{3,8,410},{4,5,83},{3,7,132},{8,4,205},{7,9,543},{0,3,110},{1,0,367},{5,7,423},{9,6,548},{4,8,395},{6,5,238},{2,1,368},{3,2,75},{2,7,302},{5,0,115},{8,5,364},{0,9,173},{2,3,532},{1,2,268},{7,4,248},{6,7,278},{3,9,78},{4,6,269},{5,8,300},{7,6,250}},5,6,4));
        assertEquals(-1, new CheapestFlightsWithinKStops().getPrice(13, new int[][]{{11,12,74},{1,8,91},{4,6,13},{7,6,39},{5,12,8},{0,12,54},{8,4,32},{0,11,4},{4,0,91},{11,7,64},{6,3,88},{8,5,80},{11,10,91},{10,0,60},{8,7,92},{12,6,78},{6,2,8},{4,3,54},{3,11,76},{3,12,23},{11,6,79},{6,12,36},{2,11,100},{2,5,49},{7,0,17},{5,8,95},{3,9,98},{8,10,61},{2,12,38},{5,7,58},{9,4,37},{8,6,79},{9,0,1},{2,3,12},{7,10,7},{12,10,52},{7,2,68},{12,2,100},{6,9,53},{7,4,90},{0,5,43},{11,2,52},{11,8,50},{12,4,38},{7,9,94},{2,7,38},{3,7,88},{9,12,20},{12,0,26},{10,5,38},{12,8,50},{0,2,77},{11,0,13},{9,10,76},{2,6,67},{5,6,34},{9,7,62},{5,3,67}},10,1,10));
        assertEquals(787, new CheapestFlightsWithinKStops().getPrice(24, new int[][]{{16,12,445},{6,11,412},{5,14,502},{10,13,308},{3,10,298},{2,16,352},{11,9,178},{18,3,75},{12,17,540},{23,4,235},{7,23,128},{9,7,168},{19,5,545},{1,0,522},{4,15,264},{14,20,463},{17,24,63},{22,19,314},{13,22,263},{21,18,384},{0,21,187},{8,1,252},{15,6,409},{20,8,259},{18,9,280},{0,6,484},{4,10,413},{13,14,483},{1,12,140},{14,16,59},{16,4,82},{5,21,267},{10,18,368},{3,0,307},{17,23,474},{22,15,300},{20,13,384},{15,11,387},{2,22,464},{23,5,444},{11,3,254},{21,19,179},{12,20,449},{8,7,426},{6,8,487},{19,2,81},{7,17,243},{9,1,543},{4,16,243},{15,12,80},{17,19,520},{22,4,540},{21,23,394},{1,3,98},{20,22,50},{19,11,141},{8,14,192},{23,18,211},{6,21,306},{7,0,146},{13,2,348},{11,1,283},{2,6,401},{16,9,114},{0,15,157},{9,8,379},{5,7,241},{18,5,345},{6,0,394},{7,20,107},{2,12,145},{16,7,282},{18,11,544},{9,3,104},{20,24,137},{8,22,425},{21,10,86},{22,21,434},{3,1,61},{17,15,535},{19,18,408},{3,13,83},{12,6,111},{15,9,151},{1,4,87},{14,17,478},{10,2,339},{11,5,418},{5,19,205},{0,8,225},{19,6,219},{1,2,272},{15,7,534}},3,24,3));
        assertEquals(0, new CheapestFlightsWithinKStops().getPrice(50, new int[][]{{0,1}},0,1,1));
        assertEquals(3600, new CheapestFlightsWithinKStops().getPrice(100, new int[][]{{0,1,990},{1,2,980},{2,3,970},{3,4,960},{4,5,950},{5,6,940},{6,7,930},{7,8,920},{8,9,910},{9,10,900},{10,11,890},{11,12,880},{12,13,870},{13,14,860},{14,15,850},{15,16,840},{16,17,830},{17,18,820},{18,19,810},{19,20,800},{20,21,790},{21,22,780},{22,23,770},{23,24,760},{24,25,750},{25,26,740},{26,27,730},{27,28,720},{28,29,710},{29,30,700},{30,31,690},{31,32,680},{32,33,670},{33,34,660},{34,35,650},{35,36,640},{36,37,630},{37,38,620},{38,39,610},{39,40,600},{40,41,590},{41,42,580},{42,43,570},{43,44,560},{44,45,550},{45,46,540},{46,47,530},{47,48,520},{48,49,510},{49,50,500},{50,51,490},{51,52,480},{52,53,470},{53,54,460},{54,55,450},{55,56,440},{56,57,430},{57,58,420},{58,59,410},{59,60,400},{60,61,390},{61,62,380},{62,63,370},{63,64,360},{64,65,350},{65,66,340},{66,67,330},{67,68,320},{68,69,310},{69,70,300},{70,71,290},{71,72,280},{72,73,270},{73,74,260},{74,75,250},{75,76,240},{76,77,230},{77,78,220},{78,79,210},{79,80,200},{80,81,190},{81,82,180},{82,83,170},{83,84,160},{84,85,150},{85,86,140},{86,87,130},{87,88,120},{88,89,110},{89,90,100},{90,91,90},{91,92,80},{92,93,70},{93,94,60},{94,95,50},{95,96,40},{96,97,30},{97,98,20},{98,99,10},{3,27,100},{27,42,100},{42,68,100},{68,73,100},{73,33,100},{33,96,100}},0,99,11));
    }
    @Test
    public void replace() {
        String s = "{{1,6},{0,2,7},{1,3,8},{2,4,9},{3,5,10},{4,11},{0,7,12},{1,6,8,13},{2,7,9,14},{3,8,10,15},{4,9,11,16},{5,10,17},{6,13,18},{7,12,14,19},{8,13,15,20},{9,14,16,21},{10,15,17,22},{11,16,23},{12,19},{13,18,20},{14,19,21},{15,20,22},{16,21,23},{17,22}}";
        System.out.println(s.replace('{','[').replace('}',']'));
    }

    @Test
    public void replaceII() {
        String s = "[[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[18,35],[0,17,36],[0,1,36],[1,2,36],[2,3,36],[3,4,36],[4,5,36],[5,6,36],[6,7,36],[7,8,36],[8,9,36],[9,10,36],[10,11,36],[11,12,36],[12,13,36],[13,14,36],[14,15,36],[15,16,36],[16,17,36],[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]]";
        System.out.println(s.replace('[','{').replace(']','}'));
    }

    @Test
    public void g() {
        int n = 50;
        for (int i = 2; i < n; i++) {
            System.out.print("{" + i + "," + (i+4) + "},");
        }
    }
}
