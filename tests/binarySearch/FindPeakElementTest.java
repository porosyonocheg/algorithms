package binarySearch;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertArrayEquals;
public class FindPeakElementTest {
    @Test
    public void getIndexes() {
        assertArrayEquals(new int[]{0,0}, new FindPeakElement().getIndexes(new int[][]{{-3}}));
        assertArrayEquals(new int[]{0,1}, new FindPeakElement().getIndexes(new int[][]{{-1, 2, 1}}));
        assertArrayEquals(new int[]{2,0}, new FindPeakElement().getIndexes(new int[][]{{0},{-3},{5}}));
        assertArrayEquals(new int[]{1,1}, new FindPeakElement().getIndexes(new int[][]{{2, -5}, {3, 4}}));
        assertArrayEquals(new int[]{1,1}, new FindPeakElement().getIndexes(new int[][]{{-2, 5, 0}, {-1, 6, 1},{-3, 5, 2}}));
        assertArrayEquals(new int[]{8,4}, new FindPeakElement().getIndexes(new int[][]{
                {23,24,4,42,14,42,19,36,35,46},
                {27,7,20,26,25,13,25,34,19,30},
                {29,36,30,18,2,4,22,41,26,42},
                {20,37,41,29,19,37,26,11,45,48},
                {21,19,40,13,16,18,44,23,25,49},
                {9,18,8,26,0,24,43,19,15,11},
                {39,45,12,47,36,25,11,43,47,18},
                {23,40,32,33,20,18,23,8,24,31},
                {44,15,23,34,37,20,13,40,49,41},
                {21,46,7,20,15,49,34,13,3,47}}));
        assertArrayEquals(new int[]{9,12}, new FindPeakElement().getIndexes(new int[][]{{52,6,3,18,8,16,12,14,26,2,41,81,70,66,23,80,56,10,82,3,39,4,87,72,52},{30,65,10,80,84,74,15,69,23,35,54,58,13,68,25,37,70,78,83,63,59,75,20,60,66},{58,78,56,97,83,32,53,79,30,12,24,68,85,100,81,10,22,66,74,46,43,36,13,40,48},{81,8,98,51,17,69,71,84,91,59,39,10,5,88,53,92,98,61,98,66,95,97,10,12,89},{23,2,62,49,35,88,75,91,38,64,91,38,29,30,6,88,22,59,37,92,71,92,55,69,66},{10,11,81,11,47,49,18,44,46,6,79,89,58,74,38,7,70,91,71,46,98,31,66,70,40},{50,6,83,64,51,92,66,40,42,17,64,70,54,24,81,28,1,75,82,94,66,89,5,8,36},{38,51,38,1,60,30,13,12,96,85,36,88,13,62,71,62,4,69,14,26,18,31,87,16,4},{81,43,88,57,86,87,42,58,31,93,9,52,84,87,1,17,92,4,91,4,52,74,80,9,36},{83,60,11,68,80,100,91,74,72,94,10,14,99,57,49,76,34,93,35,64,45,76,60,80,40},{79,11,66,9,5,76,95,67,63,35,86,62,47,90,9,68,27,42,16,97,36,18,98,93,66},{11,9,43,90,69,49,74,84,81,64,13,99,39,14,23,85,96,85,91,45,92,63,48,26,61},{78,17,47,91,85,36,17,15,47,30,73,87,92,63,61,99,70,41,62,19,77,81,23,61,74},{43,91,8,61,14,89,97,49,100,14,94,97,78,16,73,60,85,87,80,43,76,58,47,98,21},{51,40,30,41,74,78,43,22,23,26,21,62,29,57,63,94,95,43,6,3,20,62,34,4,3},{11,57,56,65,67,29,32,34,9,18,74,35,70,75,99,97,24,49,28,15,21,73,11,72,24},{46,38,65,94,10,94,3,90,42,72,45,76,18,90,42,93,55,11,35,28,100,4,54,35,33}}));
        assertArrayEquals(new int[]{15,7}, new FindPeakElement().getIndexes(new int[][]{{29,72,91,93,82,52,79,55,39,81,15,81,82,2,90},{86,83,20,7,60,9,24,86,60,28,30,6,62,68,17},{59,96,83,50,51,96,66,8,59,32,48,14,6,7,30},{91,61,47,87,68,62,40,11,92,16,81,75,80,27,52},{6,54,75,88,63,93,30,94,85,71,7,12,79,50,73},{88,69,73,13,79,58,15,77,95,75,71,81,31,6,68},{45,70,95,30,83,60,61,15,20,35,40,10,93,29,54},{81,66,63,49,8,37,49,91,6,93,82,41,81,36,89},{86,47,28,94,74,14,64,26,35,43,8,7,61,1,63},{74,99,14,8,24,22,20,40,29,7,20,53,68,10,99},{56,65,58,33,50,26,94,17,81,98,72,82,40,34,10},{46,56,28,55,31,79,13,95,67,19,88,68,94,65,15},{30,26,14,78,59,17,57,55,72,47,63,82,56,66,13},{11,85,41,75,20,98,68,9,74,24,81,83,78,8,18},{54,40,58,22,62,76,54,89,24,12,86,12,41,43,79},{27,56,29,52,96,45,24,96,48,91,14,25,45,9,27},{21,23,76,96,74,23,60,9,40,97,9,53,99,86,5},{70,72,63,100,59,32,65,63,51,55,33,83,32,87,80},{33,43,65,89,77,16,57,66,85,59,43,6,15,57,77},{47,99,23,94,57,65,37,83,50,18,80,94,79,20,78},{58,68,70,31,82,31,48,42,8,70,40,75,35,13,37},{79,35,85,93,3,1,24,37,14,38,22,92,90,55,33},{65,23,10,16,58,77,70,72,13,26,59,30,83,44,59},{46,87,9,46,95,51,76,56,26,15,11,79,93,90,51},{74,27,92,23,73,23,68,12,7,27,40,62,3,53,56},{31,10,53,9,54,55,38,58,84,69,28,74,39,50,1},{6,82,50,85,78,70,82,77,61,36,98,65,32,91,2}}));
        assertArrayEquals(new int[]{8,16}, new FindPeakElement().getIndexes(new int[][]{{6,32,39,11,45,23,54,59,19,2,48,46,8,81,40,98,52,7,12,29,65,77,92,95,57,52,4,45,31,16,13,83,51},{32,40,80,71,47,53,92,87,94,100,94,40,84,47,42,30,25,10,63,87,31,26,56,9,42,56,100,12,10,90,30,65,79},{46,11,3,91,72,28,15,94,65,82,96,60,51,95,94,45,85,68,23,96,71,95,58,7,4,46,44,27,93,34,50,19,51},{64,79,78,73,7,67,1,68,74,97,60,50,91,77,66,57,46,13,34,91,66,73,24,58,99,96,65,12,41,72,45,92,100},{15,45,93,19,84,40,82,99,49,46,35,14,12,70,45,30,48,46,42,24,67,85,12,68,26,21,4,99,71,12,37,13,6},{31,16,78,40,51,14,9,73,26,19,89,98,39,48,4,62,71,51,3,79,68,29,65,82,33,14,56,20,47,40,6,59,67},{48,45,30,28,91,81,89,51,70,64,97,25,83,49,48,7,21,9,98,32,19,42,86,53,14,52,34,23,11,100,94,28,6},{70,47,39,34,70,34,14,33,81,70,99,93,49,9,3,89,28,19,26,5,44,48,78,97,99,50,86,25,77,90,14,72,99},{10,36,44,66,22,70,7,22,52,71,47,34,43,100,85,5,100,12,4,43,53,25,18,44,73,34,63,100,27,39,10,7,100},{68,88,24,47,4,100,50,75,87,97,83,33,99,10,90,21,43,5,56,40,36,10,65,56,52,47,56,80,97,55,62,75,31},{7,87,91,51,78,84,73,38,59,41,63,59,31,72,16,3,14,19,34,43,80,86,43,79,66,13,47,76,67,91,50,51,84},{89,50,33,97,14,77,6,56,48,87,9,49,18,49,21,15,62,71,43,29,12,96,44,12,46,10,12,3,93,80,24,58,64},{13,36,82,39,47,72,44,77,4,41,61,85,8,64,34,29,64,82,72,73,51,27,65,14,22,71,58,20,91,85,94,91,9},{37,2,37,27,96,81,17,70,39,76,91,39,62,77,12,41,3,100,7,32,66,11,88,93,77,42,69,44,42,96,1,53,16},{8,34,49,14,28,55,57,67,70,5,33,6,77,62,77,64,55,11,17,72,7,64,89,59,70,25,53,56,26,61,27,2,57},{87,13,59,83,11,14,77,37,10,63,30,57,32,51,55,86,60,75,58,23,30,93,78,82,18,72,24,70,44,27,86,24,42},{80,17,68,51,26,30,49,45,54,97,76,13,82,88,31,65,44,16,55,49,36,37,64,69,62,97,45,73,33,96,14,10,74},{99,49,34,73,92,84,70,42,81,71,60,4,60,32,6,19,15,94,83,58,57,73,82,83,13,5,95,48,53,56,61,49,60},{18,51,54,12,94,73,7,80,18,44,83,82,4,67,74,68,92,76,50,11,95,20,26,90,36,10,89,66,31,66,91,96,18},{7,1,45,90,19,22,51,45,7,55,96,81,52,47,14,28,72,89,25,60,6,74,25,62,52,76,11,52,4,99,30,11,76},{17,6,30,75,53,99,9,18,39,95,99,87,54,17,45,98,62,93,88,28,98,9,91,39,20,34,50,39,92,30,91,64,65},{30,26,82,97,40,91,47,8,30,98,10,83,14,45,51,100,83,77,47,64,77,94,11,9,47,51,25,37,65,32,90,49,90},{100,37,50,9,91,6,76,95,42,3,51,26,8,16,38,35,70,66,10,57,69,1,61,8,3,53,3,71,34,2,7,30,53},{67,17,36,92,70,24,40,69,13,4,36,91,60,81,51,41,60,85,68,55,77,65,55,47,80,99,47,76,31,69,81,80,48},{40,26,41,91,15,38,11,29,83,39,26,67,13,41,66,1,45,73,54,97,70,66,33,97,76,93,56,91,44,9,51,94,87},{82,87,59,21,24,67,88,21,16,99,19,36,62,56,46,94,18,28,94,22,95,100,10,27,80,44,63,4,79,80,59,53,40},{64,13,100,80,89,42,1,14,83,10,15,33,57,46,32,72,79,96,70,55,39,17,99,28,12,48,59,28,92,28,90,57,54},{73,99,69,53,24,57,50,70,11,30,46,75,83,13,48,57,74,69,48,78,47,28,6,70,88,56,37,11,3,60,87,81,29},{42,13,27,5,99,74,48,77,3,80,21,89,2,59,92,16,90,2,77,4,62,45,13,55,38,69,41,67,29,70,91,59,100},{30,94,29,72,37,46,5,86,58,98,79,69,14,60,6,5,42,54,50,41,24,92,64,52,37,80,98,79,66,19,51,95,13},{92,62,31,10,3,26,36,72,73,25,45,63,61,37,63,41,33,41,83,19,78,63,12,57,10,2,55,10,9,2,16,84,67},{41,38,40,46,6,97,51,75,10,80,71,45,13,30,91,100,89,99,74,52,41,91,19,18,84,30,91,61,33,70,78,44,43},{86,43,89,68,2,49,32,7,21,1,78,83,47,96,92,38,28,1,22,69,38,90,35,32,4,53,100,34,53,47,26,86,51}}));
    }

    @Test
    public void generate() {
        int n = 33, m = 33, limit = 100;
        int[][] nums = new int[m][n];
        nums[0][0] = (int)(Math.random()*limit + 1);
        int prev = nums[0][0], cur = nums[0][0];
        for (int j = 0; j < n; j++) {
            while (cur == prev) {
                cur = (int)(Math.random()*limit + 1);
            }
            prev = cur;
            nums[0][j] = cur;
        }
        for (int i = 1; i < m; i++) {
            prev = cur = 0;
            for (int j = 0; j < n; j++) {
                while (prev == cur || cur == nums[i-1][j]) {
                    cur = (int)(Math.random()*limit + 1);
                }
                prev = cur;
                nums[i][j] = cur;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            System.out.print("{");
            for (int j = 0; j < nums[0].length-1; j++) {
                System.out.print(nums[i][j] + ",");
            }
            System.out.print(nums[i][nums[0].length-1] + "},");
        }
    }
}
