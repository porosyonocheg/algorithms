package backtracking;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class PalindromePartitioningTest {
    @Test
    public void partition() {
        List<List<String>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        assertEquals(result, new PalindromePartitioning().divide(""));
        result = new ArrayList<>();
        result.add(Collections.singletonList("a"));
        assertEquals(result, new PalindromePartitioning().divide("a"));
        result = new ArrayList<>();
        result.add(Arrays.asList("b", "a"));
        assertEquals(result, new PalindromePartitioning().divide("ba"));
        result = new ArrayList<>();
        result.add(Arrays.asList("a", "a"));
        result.add(Collections.singletonList("aa"));
        assertEquals(result, new PalindromePartitioning().divide("aa"));
        result = new ArrayList<>();
        result.add(Arrays.asList("a","b","b","a"));
        result.add(Arrays.asList("a","bb","a"));
        result.add(Collections.singletonList("abba"));
        assertEquals(result, new PalindromePartitioning().divide("abba"));
        result = new ArrayList<>();
        result.add(Arrays.asList("b","a","o","b","a","b"));
        result.add(Arrays.asList("b","a","o","bab"));
        assertEquals(result, new PalindromePartitioning().divide("baobab"));
        result = new ArrayList<>();
        result.add(Arrays.asList("c", "b", "a", "a", "b", "c", "b", "a", "a", "b", "c"));
        result.add(Arrays.asList("c", "b", "a", "a", "b", "c", "b", "aa", "b", "c"));
        result.add(Arrays.asList("c", "b", "a", "a", "b", "c", "baab", "c"));
        result.add(Arrays.asList("c", "b", "a", "a", "b", "cbaabc"));
        result.add(Arrays.asList("c", "b", "a", "a", "bcb", "a", "a", "b", "c"));
        result.add(Arrays.asList("c", "b", "a", "a", "bcb", "aa", "b", "c"));
        result.add(Arrays.asList("c", "b", "a", "abcba", "a", "b", "c"));
        result.add(Arrays.asList("c", "b", "aa", "b", "c", "b", "a", "a", "b", "c"));
        result.add(Arrays.asList("c", "b", "aa", "b", "c", "b", "aa", "b", "c"));
        result.add(Arrays.asList("c", "b", "aa", "b", "c", "baab", "c"));
        result.add(Arrays.asList("c", "b", "aa", "b", "cbaabc"));
        result.add(Arrays.asList("c", "b", "aa", "bcb", "a", "a", "b", "c"));
        result.add(Arrays.asList("c", "b", "aa", "bcb", "aa", "b", "c"));
        result.add(Arrays.asList("c", "b", "aabcbaa", "b", "c"));
        result.add(Arrays.asList("c", "baab", "c", "b", "a", "a", "b", "c"));
        result.add(Arrays.asList("c", "baab", "c", "b", "aa", "b", "c"));
        result.add(Arrays.asList("c", "baab", "c", "baab", "c"));
        result.add(Arrays.asList("c", "baab", "cbaabc"));
        result.add(Arrays.asList("c", "baabcbaab", "c"));
        result.add(Arrays.asList("cbaabc", "b", "a", "a", "b", "c"));
        result.add(Arrays.asList("cbaabc", "b", "aa", "b", "c"));
        result.add(Arrays.asList("cbaabc", "baab", "c"));
        result.add(Collections.singletonList("cbaabcbaabc"));
        assertEquals(result, new PalindromePartitioning().divide("cbaabcbaabc"));
        result = new ArrayList<>();
        result.add(Arrays.asList("c", "c", "c", "c", "c"));
        result.add(Arrays.asList("c", "c", "c", "cc"));
        result.add(Arrays.asList("c", "c", "cc", "c"));
        result.add(Arrays.asList("c", "c", "ccc"));
        result.add(Arrays.asList("c", "cc", "c", "c"));
        result.add(Arrays.asList("c", "cc", "cc"));
        result.add(Arrays.asList("c", "ccc", "c"));
        result.add(Arrays.asList("c", "cccc"));
        result.add(Arrays.asList("cc", "c", "c", "c"));
        result.add(Arrays.asList("cc", "c", "cc"));
        result.add(Arrays.asList("cc", "cc", "c"));
        result.add(Arrays.asList("cc", "ccc"));
        result.add(Arrays.asList("ccc", "c", "c"));
        result.add(Arrays.asList("ccc", "cc"));
        result.add(Arrays.asList("cccc", "c"));
        result.add(Collections.singletonList("ccccc"));
        assertEquals(result, new PalindromePartitioning().divide("ccccc"));
        result = new ArrayList<>();
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "а", "л", "а", "н", "а", "л", "а", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "а", "л", "а", "н", "ала", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "а", "л", "ана", "л", "а", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "а", "ланал", "а", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "ала", "н", "а", "л", "а", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "ала", "н", "ала", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "п", "аланала", "п", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "у", "паланалап", "у", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "а", "упаланалапу", "а", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "з", "аупаланалапуа", "з", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "о", "заупаланалапуаз", "о", "р", "а"));
        result.add(Arrays.asList("а", "р", "озаупаланалапуазо", "р", "а"));
        result.add(Arrays.asList("а", "розаупаланалапуазор", "а"));
        result.add(Collections.singletonList("арозаупаланалапуазора"));
        assertEquals(result, new PalindromePartitioning().divide("арозаупаланалапуазора"));
        result = new ArrayList<>();
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "b", "b", "a", "ff", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "a", "bb", "a", "ff", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "b", "abba", "ff", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "a", "bab", "b", "a", "ff", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "b", "b", "a", "ff", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "f", "f", "c", "oodfdoo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "o", "o", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "o", "o", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "o", "o", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "o", "o", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "o", "odfdo", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "oo", "d", "f", "d", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "oo", "d", "f", "d", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "oo", "dfd", "o", "o"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "oo", "dfd", "oo"));
        result.add(Arrays.asList("f", "aba", "bb", "a", "ff", "c", "oodfdoo"));
        assertEquals(result, new PalindromePartitioning().divide("fababbaffcoodfdoo"));
    }
}
