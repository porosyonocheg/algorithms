package backtracking;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class IncreasingSubsequencesTest {
    @Test
    public void findAll() {
        List<List<Integer>> result = new ArrayList<>();
        assertEquals(result, new IncreasingSubsequences().find(new int[]{}));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{3}));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{9,8,7,6,5,4,3,2,1}));
        result.add(Arrays.asList(Integer.MIN_VALUE, Integer.MAX_VALUE));
        result.add(Arrays.asList(Integer.MIN_VALUE, 0));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 0}));
        result = new ArrayList<>();
        result.add(Arrays.asList(4, 7));
        result.add(Arrays.asList(2, 7));
        result.add(Arrays.asList(2, 3));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{4,2,7,3}));
        result = new ArrayList<>();
        result.add(Arrays.asList(9, 9));
        result.add(Arrays.asList(9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9, 9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9, 9, 9, 9, 9));
        result.add(Arrays.asList(9, 9, 9, 9, 9, 9, 9, 9, 9));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{9,9,9,9,9,9,9,9,9}));
        result = new ArrayList<>();
        result.add(Arrays.asList(1, 2));
        result.add(Arrays.asList(1, 2, 3));
        result.add(Arrays.asList(1, 2, 3, 4));
        result.add(Arrays.asList(1, 2, 3, 4, 5));
        result.add(Arrays.asList(1, 2, 3, 4, 5, 6));
        result.add(Arrays.asList(1, 2, 3, 4, 6));
        result.add(Arrays.asList(1, 2, 3, 5));
        result.add(Arrays.asList(1, 2, 3, 5, 6));
        result.add(Arrays.asList(1, 2, 3, 6));
        result.add(Arrays.asList(1, 2, 4));
        result.add(Arrays.asList(1, 2, 4, 5));
        result.add(Arrays.asList(1, 2, 4, 5, 6));
        result.add(Arrays.asList(1, 2, 4, 6));
        result.add(Arrays.asList(1, 2, 5));
        result.add(Arrays.asList(1, 2, 5, 6));
        result.add(Arrays.asList(1, 2, 6));
        result.add(Arrays.asList(1, 3));
        result.add(Arrays.asList(1, 3, 4));
        result.add(Arrays.asList(1, 3, 4, 5));
        result.add(Arrays.asList(1, 3, 4, 5, 6));
        result.add(Arrays.asList(1, 3, 4, 6));
        result.add(Arrays.asList(1, 3, 5));
        result.add(Arrays.asList(1, 3, 5, 6));
        result.add(Arrays.asList(1, 3, 6));
        result.add(Arrays.asList(1, 4));
        result.add(Arrays.asList(1, 4, 5));
        result.add(Arrays.asList(1, 4, 5, 6));
        result.add(Arrays.asList(1, 4, 6));
        result.add(Arrays.asList(1, 5));
        result.add(Arrays.asList(1, 5, 6));
        result.add(Arrays.asList(1, 6));
        result.add(Arrays.asList(2, 3));
        result.add(Arrays.asList(2, 3, 4));
        result.add(Arrays.asList(2, 3, 4, 5));
        result.add(Arrays.asList(2, 3, 4, 5, 6));
        result.add(Arrays.asList(2, 3, 4, 6));
        result.add(Arrays.asList(2, 3, 5));
        result.add(Arrays.asList(2, 3, 5, 6));
        result.add(Arrays.asList(2, 3, 6));
        result.add(Arrays.asList(2, 4));
        result.add(Arrays.asList(2, 4, 5));
        result.add(Arrays.asList(2, 4, 5, 6));
        result.add(Arrays.asList(2, 4, 6));
        result.add(Arrays.asList(2, 5));
        result.add(Arrays.asList(2, 5, 6));
        result.add(Arrays.asList(2, 6));
        result.add(Arrays.asList(3, 4));
        result.add(Arrays.asList(3, 4, 5));
        result.add(Arrays.asList(3, 4, 5, 6));
        result.add(Arrays.asList(3, 4, 6));
        result.add(Arrays.asList(3, 5));
        result.add(Arrays.asList(3, 5, 6));
        result.add(Arrays.asList(3, 6));
        result.add(Arrays.asList(4, 5));
        result.add(Arrays.asList(4, 5, 6));
        result.add(Arrays.asList(4, 6));
        result.add(Arrays.asList(5, 6));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{1,2,3,4,5,6}));
        result = new ArrayList<>();
        result.add(Arrays.asList(7, 9));
        result.add(Arrays.asList(7, 9, 11));
        result.add(Arrays.asList(7, 7));
        result.add(Arrays.asList(7, 7, 11));
        result.add(Arrays.asList(7, 11));
        result.add(Arrays.asList(3, 9));
        result.add(Arrays.asList(3, 9, 11));
        result.add(Arrays.asList(3, 7));
        result.add(Arrays.asList(3, 7, 11));
        result.add(Arrays.asList(3, 11));
        result.add(Arrays.asList(3, 5));
        result.add(Arrays.asList(9, 11));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{7,3,9,7,11,5}));
        result = new ArrayList<>();
        result.add(Arrays.asList(-1, 2));
        result.add(Arrays.asList(-1, 1));
        result.add(Arrays.asList(-1, 0));
        result.add(Arrays.asList(-2, 1));
        result.add(Arrays.asList(-2, 0));
        result.add(Arrays.asList(-3, 0));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{3,-1,2,-2,1,-3,0,-4}));
        result = new ArrayList<>();
        result.add(Arrays.asList(1, 7));
        result.add(Arrays.asList(1, 7, 9));
        result.add(Arrays.asList(1, 7, 7));
        result.add(Arrays.asList(1, 5));
        result.add(Arrays.asList(1, 5, 6));
        result.add(Arrays.asList(1, 5, 6, 9));
        result.add(Arrays.asList(1, 5, 6, 7));
        result.add(Arrays.asList(1, 5, 9));
        result.add(Arrays.asList(1, 5, 5));
        result.add(Arrays.asList(1, 5, 5, 7));
        result.add(Arrays.asList(1, 5, 7));
        result.add(Arrays.asList(1, 6));
        result.add(Arrays.asList(1, 6, 9));
        result.add(Arrays.asList(1, 6, 7));
        result.add(Arrays.asList(1, 9));
        result.add(Arrays.asList(7, 9));
        result.add(Arrays.asList(7, 7));
        result.add(Arrays.asList(5, 6));
        result.add(Arrays.asList(5, 6, 9));
        result.add(Arrays.asList(5, 6, 7));
        result.add(Arrays.asList(5, 9));
        result.add(Arrays.asList(5, 5));
        result.add(Arrays.asList(5, 5, 7));
        result.add(Arrays.asList(5, 7));
        result.add(Arrays.asList(6, 9));
        result.add(Arrays.asList(6, 7));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{1,7,5,6,9,5,7}));
        result = new ArrayList<>();
        result.add(Arrays.asList(111, 333));
        result.add(Arrays.asList(111, 333, 675));
        result.add(Arrays.asList(111, 333, 675, 731));
        result.add(Arrays.asList(111, 333, 731));
        result.add(Arrays.asList(111, 333, 530));
        result.add(Arrays.asList(111, 675));
        result.add(Arrays.asList(111, 675, 731));
        result.add(Arrays.asList(111, 731));
        result.add(Arrays.asList(111, 530));
        result.add(Arrays.asList(-1111, 333));
        result.add(Arrays.asList(-1111, 333, 675));
        result.add(Arrays.asList(-1111, 333, 675, 731));
        result.add(Arrays.asList(-1111, 333, 731));
        result.add(Arrays.asList(-1111, 333, 530));
        result.add(Arrays.asList(-1111, -787));
        result.add(Arrays.asList(-1111, -787, 675));
        result.add(Arrays.asList(-1111, -787, 675, 731));
        result.add(Arrays.asList(-1111, -787, -235));
        result.add(Arrays.asList(-1111, -787, -235, 731));
        result.add(Arrays.asList(-1111, -787, -235, -121));
        result.add(Arrays.asList(-1111, -787, -235, -121, 530));
        result.add(Arrays.asList(-1111, -787, -235, 530));
        result.add(Arrays.asList(-1111, -787, 731));
        result.add(Arrays.asList(-1111, -787, -121));
        result.add(Arrays.asList(-1111, -787, -121, 530));
        result.add(Arrays.asList(-1111, -787, 530));
        result.add(Arrays.asList(-1111, 675));
        result.add(Arrays.asList(-1111, 675, 731));
        result.add(Arrays.asList(-1111, -235));
        result.add(Arrays.asList(-1111, -235, 731));
        result.add(Arrays.asList(-1111, -235, -121));
        result.add(Arrays.asList(-1111, -235, -121, 530));
        result.add(Arrays.asList(-1111, -235, 530));
        result.add(Arrays.asList(-1111, 731));
        result.add(Arrays.asList(-1111, -121));
        result.add(Arrays.asList(-1111, -121, 530));
        result.add(Arrays.asList(-1111, 530));
        result.add(Arrays.asList(333, 675));
        result.add(Arrays.asList(333, 675, 731));
        result.add(Arrays.asList(333, 731));
        result.add(Arrays.asList(333, 530));
        result.add(Arrays.asList(-787, 675));
        result.add(Arrays.asList(-787, 675, 731));
        result.add(Arrays.asList(-787, -235));
        result.add(Arrays.asList(-787, -235, 731));
        result.add(Arrays.asList(-787, -235, -121));
        result.add(Arrays.asList(-787, -235, -121, 530));
        result.add(Arrays.asList(-787, -235, 530));
        result.add(Arrays.asList(-787, 731));
        result.add(Arrays.asList(-787, -121));
        result.add(Arrays.asList(-787, -121, 530));
        result.add(Arrays.asList(-787, 530));
        result.add(Arrays.asList(675, 731));
        result.add(Arrays.asList(-235, 731));
        result.add(Arrays.asList(-235, -121));
        result.add(Arrays.asList(-235, -121, 530));
        result.add(Arrays.asList(-235, 530));
        result.add(Arrays.asList(-121, 530));
        assertEquals(result, new IncreasingSubsequences().find(new int[]{111, -1111, 333, -787, 675, -235, 731, -121, 530}));
    }
}
