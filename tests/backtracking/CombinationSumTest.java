package backtracking;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class CombinationSumTest {
    @Test
    public void uniqueValues() {
        List<List<Integer>> result = new ArrayList<>();
        result.add(Collections.singletonList(5));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{5}, 5));
        result = new ArrayList<>();
        result.add(Arrays.asList(5,5,5,5,5));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{5}, 25));
        result = new ArrayList<>();
        result.add(Arrays.asList(5, 3));
        result.add(Arrays.asList(3, 3, 2));
        result.add(Arrays.asList(2, 2, 2, 2));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{5,3,2}, 8));
        result = new ArrayList<>();
        result.add(Arrays.asList(5, 5, 2));
        result.add(Arrays.asList(5, 5, 1, 1));
        result.add(Arrays.asList(5, 2, 2, 2, 1));
        result.add(Arrays.asList(5, 2, 2, 1, 1, 1));
        result.add(Arrays.asList(5, 2, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(5, 2, 1, 4));
        result.add(Arrays.asList(5, 1, 1, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(5, 1, 1, 1, 4));
        result.add(Arrays.asList(2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(2, 2, 2, 2, 2, 1, 1));
        result.add(Arrays.asList(2, 2, 2, 2, 1, 1, 1, 1));
        result.add(Arrays.asList(2, 2, 2, 2, 4));
        result.add(Arrays.asList(2, 2, 2, 1, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(2, 2, 2, 1, 1, 4));
        result.add(Arrays.asList(2, 2, 1, 1, 1, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(2, 2, 1, 1, 1, 1, 4));
        result.add(Arrays.asList(2, 2, 4, 4));
        result.add(Arrays.asList(2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(2, 1, 1, 1, 1, 1, 1, 4));
        result.add(Arrays.asList(2, 1, 1, 4, 4));
        result.add(Arrays.asList(2, 10));
        result.add(Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
        result.add(Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 4));
        result.add(Arrays.asList(1, 1, 1, 1, 4, 4));
        result.add(Arrays.asList(1, 1, 10));
        result.add(Arrays.asList(4, 4, 4));
        result.add(Collections.singletonList(12));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{5,2,1,4,12,10}, 12));
        result = new ArrayList<>();
        result.add(Arrays.asList(20,20,13,13,13,32));
        result.add(Arrays.asList(20,13,13,13,13,13,13,13));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{99,20,13,32,44,76}, 111));
        result = new ArrayList<>();
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{44,22,64,78,36,18,2,58}, 101));
        result.add(Arrays.asList(44, 44, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 22, 22, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 22, 18, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 22, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 36, 18, 2));
        result.add(Arrays.asList(44, 36, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 18, 18, 18, 2));
        result.add(Arrays.asList(44, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(44, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 22, 22, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 22, 18, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 22, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 36, 18, 2));
        result.add(Arrays.asList(22, 22, 36, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 18, 18, 18, 2));
        result.add(Arrays.asList(22, 22, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 22, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 64, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 78));
        result.add(Arrays.asList(22, 36, 36, 2, 2, 2));
        result.add(Arrays.asList(22, 36, 18, 18, 2, 2, 2));
        result.add(Arrays.asList(22, 36, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 36, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 18, 18, 18, 18, 2, 2, 2));
        result.add(Arrays.asList(22, 18, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 18, 2, 58));
        result.add(Arrays.asList(22, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(22, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 58));
        result.add(Arrays.asList(64, 36));
        result.add(Arrays.asList(64, 18, 18));
        result.add(Arrays.asList(64, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(64, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(78, 18, 2, 2));
        result.add(Arrays.asList(78, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 36, 18, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 36, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 18, 18, 18, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(36, 2, 2, 2, 58));
        result.add(Arrays.asList(18, 18, 18, 18, 18, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(18, 18, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(18, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(18, 18, 2, 2, 2, 58));
        result.add(Arrays.asList(18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 58));
        result.add(Arrays.asList(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));
        result.add(Arrays.asList(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 58));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{44,22,64,78,36,18,2,58}, 100));
        result = new ArrayList<>();
        result.add(Arrays.asList(2, 2, 2, 2, 7));
        result.add(Arrays.asList(2, 2, 2, 9));
        result.add(Arrays.asList(2, 2, 4, 7));
        result.add(Arrays.asList(2, 4, 9));
        result.add(Arrays.asList(4, 4, 7));
        assertEquals(result, new CombinationSum(false).getCombinations(new int[]{2,4,7,9,12,16}, 15));
    }

    @Test
    public void containsDuplicates() {
        List<List<Integer>> result = new ArrayList<>();
        assertEquals(result, new CombinationSum().getCombinations(new int[]{1,1,6}, 5));
        result.add(Arrays.asList(1,2,2));
        result.add(Collections.singletonList(5));
        assertEquals(result, new CombinationSum().getCombinations(new int[]{2,5,2,1,2}, 5));
        result = new ArrayList<>();
        result.add(Arrays.asList(-9, -3, 2, 8, 17));
        assertEquals(result, new CombinationSum().getCombinations(new int[]{8,-3,17,-9,2}, 15));
        result = new ArrayList<>();
        result.add(Arrays.asList(2, 3, 7, 7, 7, 8, 9, 15));
        result.add(Arrays.asList(2, 3, 7, 7, 7, 8, 12, 12));
        result.add(Arrays.asList(2, 3, 7, 7, 7, 8, 24));
        result.add(Arrays.asList(2, 3, 7, 7, 7, 9, 23));
        result.add(Arrays.asList(2, 3, 7, 7, 7, 12, 20));
        result.add(Arrays.asList(2, 3, 7, 7, 7, 15, 17));
        result.add(Arrays.asList(2, 3, 7, 7, 8, 9, 22));
        result.add(Arrays.asList(2, 3, 7, 7, 8, 12, 19));
        result.add(Arrays.asList(2, 3, 7, 7, 12, 12, 15));
        result.add(Arrays.asList(2, 3, 7, 7, 15, 24));
        result.add(Arrays.asList(2, 3, 7, 7, 17, 22));
        result.add(Arrays.asList(2, 3, 7, 7, 19, 20));
        result.add(Arrays.asList(2, 3, 7, 8, 9, 12, 17));
        result.add(Arrays.asList(2, 3, 7, 8, 15, 23));
        result.add(Arrays.asList(2, 3, 7, 9, 15, 22));
        result.add(Arrays.asList(2, 3, 7, 9, 17, 20));
        result.add(Arrays.asList(2, 3, 7, 12, 12, 22));
        result.add(Arrays.asList(2, 3, 7, 12, 15, 19));
        result.add(Arrays.asList(2, 3, 7, 12, 17, 17));
        result.add(Arrays.asList(2, 3, 7, 22, 24));
        result.add(Arrays.asList(2, 3, 7, 23, 23));
        result.add(Arrays.asList(2, 3, 8, 9, 12, 12, 12));
        result.add(Arrays.asList(2, 3, 8, 9, 12, 24));
        result.add(Arrays.asList(2, 3, 8, 9, 17, 19));
        result.add(Arrays.asList(2, 3, 8, 22, 23));
        result.add(Arrays.asList(2, 3, 9, 12, 12, 20));
        result.add(Arrays.asList(2, 3, 9, 12, 15, 17));
        result.add(Arrays.asList(2, 3, 9, 20, 24));
        result.add(Arrays.asList(2, 3, 12, 12, 12, 17));
        result.add(Arrays.asList(2, 3, 12, 17, 24));
        result.add(Arrays.asList(2, 3, 12, 19, 22));
        result.add(Arrays.asList(2, 3, 17, 17, 19));
        result.add(Arrays.asList(2, 7, 7, 7, 8, 12, 15));
        result.add(Arrays.asList(2, 7, 7, 7, 12, 23));
        result.add(Arrays.asList(2, 7, 7, 7, 15, 20));
        result.add(Arrays.asList(2, 7, 7, 8, 12, 22));
        result.add(Arrays.asList(2, 7, 7, 8, 15, 19));
        result.add(Arrays.asList(2, 7, 7, 8, 17, 17));
        result.add(Arrays.asList(2, 7, 7, 19, 23));
        result.add(Arrays.asList(2, 7, 7, 20, 22));
        result.add(Arrays.asList(2, 7, 8, 9, 12, 20));
        result.add(Arrays.asList(2, 7, 8, 9, 15, 17));
        result.add(Arrays.asList(2, 7, 8, 12, 12, 17));
        result.add(Arrays.asList(2, 7, 8, 17, 24));
        result.add(Arrays.asList(2, 7, 8, 19, 22));
        result.add(Arrays.asList(2, 7, 9, 17, 23));
        result.add(Arrays.asList(2, 7, 9, 20, 20));
        result.add(Arrays.asList(2, 7, 12, 15, 22));
        result.add(Arrays.asList(2, 7, 12, 17, 20));
        result.add(Arrays.asList(2, 7, 15, 17, 17));
        result.add(Arrays.asList(2, 8, 9, 12, 12, 15));
        result.add(Arrays.asList(2, 8, 9, 15, 24));
        result.add(Arrays.asList(2, 8, 9, 17, 22));
        result.add(Arrays.asList(2, 8, 9, 19, 20));
        result.add(Arrays.asList(2, 8, 12, 12, 24));
        result.add(Arrays.asList(2, 8, 12, 17, 19));
        result.add(Arrays.asList(2, 9, 12, 12, 23));
        result.add(Arrays.asList(2, 9, 12, 15, 20));
        result.add(Arrays.asList(2, 9, 23, 24));
        result.add(Arrays.asList(2, 12, 12, 12, 20));
        result.add(Arrays.asList(2, 12, 12, 15, 17));
        result.add(Arrays.asList(2, 12, 20, 24));
        result.add(Arrays.asList(2, 15, 17, 24));
        result.add(Arrays.asList(2, 15, 19, 22));
        result.add(Arrays.asList(2, 17, 17, 22));
        result.add(Arrays.asList(2, 17, 19, 20));
        result.add(Arrays.asList(3, 7, 7, 7, 8, 9, 17));
        result.add(Arrays.asList(3, 7, 7, 7, 12, 22));
        result.add(Arrays.asList(3, 7, 7, 7, 15, 19));
        result.add(Arrays.asList(3, 7, 7, 7, 17, 17));
        result.add(Arrays.asList(3, 7, 7, 8, 9, 12, 12));
        result.add(Arrays.asList(3, 7, 7, 8, 9, 24));
        result.add(Arrays.asList(3, 7, 7, 9, 12, 20));
        result.add(Arrays.asList(3, 7, 7, 9, 15, 17));
        result.add(Arrays.asList(3, 7, 7, 12, 12, 17));
        result.add(Arrays.asList(3, 7, 7, 17, 24));
        result.add(Arrays.asList(3, 7, 7, 19, 22));
        result.add(Arrays.asList(3, 7, 8, 9, 12, 19));
        result.add(Arrays.asList(3, 7, 8, 17, 23));
        result.add(Arrays.asList(3, 7, 8, 20, 20));
        result.add(Arrays.asList(3, 7, 9, 12, 12, 15));
        result.add(Arrays.asList(3, 7, 9, 15, 24));
        result.add(Arrays.asList(3, 7, 9, 17, 22));
        result.add(Arrays.asList(3, 7, 9, 19, 20));
        result.add(Arrays.asList(3, 7, 12, 12, 24));
        result.add(Arrays.asList(3, 7, 12, 17, 19));
        result.add(Arrays.asList(3, 8, 9, 15, 23));
        result.add(Arrays.asList(3, 8, 12, 12, 23));
        result.add(Arrays.asList(3, 8, 12, 15, 20));
        result.add(Arrays.asList(3, 8, 23, 24));
        result.add(Arrays.asList(3, 9, 12, 12, 22));
        result.add(Arrays.asList(3, 9, 12, 15, 19));
        result.add(Arrays.asList(3, 9, 12, 17, 17));
        result.add(Arrays.asList(3, 9, 22, 24));
        result.add(Arrays.asList(3, 9, 23, 23));
        result.add(Arrays.asList(3, 12, 12, 12, 19));
        result.add(Arrays.asList(3, 12, 19, 24));
        result.add(Arrays.asList(3, 12, 20, 23));
        result.add(Arrays.asList(3, 15, 17, 23));
        result.add(Arrays.asList(3, 15, 20, 20));
        result.add(Arrays.asList(7, 7, 7, 8, 9, 20));
        result.add(Arrays.asList(7, 7, 7, 8, 12, 17));
        result.add(Arrays.asList(7, 7, 7, 15, 22));
        result.add(Arrays.asList(7, 7, 7, 17, 20));
        result.add(Arrays.asList(7, 7, 8, 9, 12, 15));
        result.add(Arrays.asList(7, 7, 8, 12, 12, 12));
        result.add(Arrays.asList(7, 7, 8, 12, 24));
        result.add(Arrays.asList(7, 7, 8, 17, 19));
        result.add(Arrays.asList(7, 7, 9, 12, 23));
        result.add(Arrays.asList(7, 7, 9, 15, 20));
        result.add(Arrays.asList(7, 7, 12, 12, 20));
        result.add(Arrays.asList(7, 7, 12, 15, 17));
        result.add(Arrays.asList(7, 7, 20, 24));
        result.add(Arrays.asList(7, 8, 9, 12, 22));
        result.add(Arrays.asList(7, 8, 9, 15, 19));
        result.add(Arrays.asList(7, 8, 9, 17, 17));
        result.add(Arrays.asList(7, 8, 12, 12, 19));
        result.add(Arrays.asList(7, 8, 19, 24));
        result.add(Arrays.asList(7, 8, 20, 23));
        result.add(Arrays.asList(7, 9, 19, 23));
        result.add(Arrays.asList(7, 9, 20, 22));
        result.add(Arrays.asList(7, 12, 12, 12, 15));
        result.add(Arrays.asList(7, 12, 15, 24));
        result.add(Arrays.asList(7, 12, 17, 22));
        result.add(Arrays.asList(7, 12, 19, 20));
        result.add(Arrays.asList(7, 15, 17, 19));
        result.add(Arrays.asList(8, 9, 12, 12, 17));
        result.add(Arrays.asList(8, 9, 17, 24));
        result.add(Arrays.asList(8, 9, 19, 22));
        result.add(Arrays.asList(8, 12, 15, 23));
        result.add(Arrays.asList(9, 12, 15, 22));
        result.add(Arrays.asList(9, 12, 17, 20));
        result.add(Arrays.asList(9, 15, 17, 17));
        result.add(Arrays.asList(12, 12, 12, 22));
        result.add(Arrays.asList(12, 12, 15, 19));
        result.add(Arrays.asList(12, 12, 17, 17));
        result.add(Arrays.asList(12, 22, 24));
        result.add(Arrays.asList(12, 23, 23));
        result.add(Arrays.asList(15, 19, 24));
        result.add(Arrays.asList(15, 20, 23));
        result.add(Arrays.asList(17, 17, 24));
        result.add(Arrays.asList(17, 19, 22));
        assertEquals(result, new CombinationSum().getCombinations(new int[]{8,20,12,20,17,23,2,19,12,7,22,15,7,7,17,3,12,9,23,24}, 58));
    }
}
